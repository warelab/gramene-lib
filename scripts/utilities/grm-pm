#!/usr/bin/env perl

=head1 NAME

grm-pm - stub out a new Perl module for Gramene

=head1 SYNOPSIS

  grm-pm <module-name> [description]

=head1 DESCRIPTION

This script will stub out a new Perl module in the "Gramene" namespace
in the Gramene config.yaml's "${base_dir}/lib" directory.  The module
name provided may or may not contain the top-level "Grm" namespace
as the resulting module will always be placed there regardless.  E.g.,
the arguments "Ontology::Foo" and "Grm::Ontology::Foo" will both
result in a module named "Grm::Ontology::Foo" created with the
path "/path/to/gramene/lib/Grm/Ontology/Foo.pm."

The resulting module will contain basic POD sections and other
suggestions from the Gramene developer's conventions L<SEE ALSO>.  An
optional description can be provided to place into the POD.

To specify the author name and e-mail address that appears in the POD, 
create a file called ".gramenerc" in your home directory with entries 
like the following:

  author=John Q. Public
  email=jqp@place.com

=head1 SEE ALSO

http://dev.gramene.org/internaltext/gramene-developer-conventions.pod.

=head1 AUTHOR

Ken Youens-Clark E<lt>kclark@cshl.eduE<gt>.

=head1 COPYRIGHT

Copyright (c) 2012 Cold Spring Harbor Laboratory

This library is free software;  you can redistribute it and/or modify 
it under the same terms as Perl itself.

=cut

# ---------------------------------------------------------

use strict;
use Config;
use Cwd;
use Env '$EDITOR';
use File::Basename;
use File::Path;
use File::Spec::Functions;
use Getopt::Long;
use Grm::Config;
use Readonly;
use Template;

my $help;
GetOptions(
    'h|help'    => \$help,
);

my $pkg_name = shift || '';

#
# Can't use Pod::Usage as it gets confused by the POD in the template.
#
if ( $help || ! $pkg_name ) {
    my $p = basename( $0 );
    print "Usage:\n\t$p <script-name> [description]\n\n";
    exit(0);
}

unless ( $pkg_name =~ /^Grm::/ ) {
    $pkg_name = 'Grm::' . $pkg_name;
}

my $desc     = shift || 'a Gramene module';
my @fname    = grep { !/Grm/ } split( /::/, $pkg_name );
$fname[-1]  .= '.pm';
my $conf     = Grm::Config->new;
my $base_dir = $conf->get('base_dir') or die "No base_dir in config\n";
my $path     = catfile( $base_dir, 'lib', 'Grm', @fname );
my $editor   = $EDITOR || 'vim';

if ( -e $path ) {
    print "'$path' exists.\nOK to overwrite? [y/N] ";
    chomp( my $answer = <STDIN> );
    unless ( $answer =~ m/^[yY]/ ) {
        print "Exiting.\n"; 
        exit(0);
    }
}

my $dir_name = dirname( $path );
unless ( -d $dir_name ) {
    print "The directory '$dir_name' does not exist.  OK to create?  [Y/n] ";
    chomp( my $answer = <STDIN> );
    if ( $answer =~ m/^[yY]/ ) {
        mkpath( $dir_name ) or die "Can't make directory '$dir_name': $!\n";
    }
    else {
        print "Won't make new directory.  Exiting.\n";
        exit(0);
    }
}

my ( $user_name, $full_name, $email_address );
{
    my ( $name, $passwd, $uid, $gid, $quota, $comment, $gcos,
        $home_dir, $shell ) = getpwuid( $> ); # effective UID
    $user_name = $name;
    $full_name = $gcos || $name;

    my $gramenerc = catfile( $home_dir, '.gramenerc' );
    if ( -e $gramenerc ) {
        if ( open my $fh, $gramenerc ) {
            while ( <$fh> ) {
                if ( /^author\s*=\s*(.*)$/ ) {
                    $full_name = $1;
                }
                elsif ( /^email\s*=\s*(.*)$/ ) {
                    $email_address = $1;
                }
            }
        }
    }
}

my $t = Template->new;
local $/;
my $template = <DATA>;
my $output; 
$t->process( 
    \$template, 
    {
        pkg_name      => $pkg_name,
        desc          => $desc, 
        full_name     => $full_name,
        user_name     => $user_name,
        email_address => $email_address || $user_name.'@cshl.edu',
        year          => (localtime)[5] + 1900,
    },
    \$output
) or die $t->error;

open my $fh, ">$path" or die "Can't write to '$path': $!\n";
print $fh $output;
close $fh;

my $cmd = "$editor $path";
exec $cmd or die "Couldn't exec '$cmd': $!\n";
exit(0);

__DATA__
[%- SET pod_prefix = '=' -%]
package [% pkg_name %];

[% pod_prefix %]head1 NAME

[% pkg_name %] - [% desc %]

[% pod_prefix %]head1 SYNOPSIS

  use [% pkg_name %];

[% pod_prefix %]head1 DESCRIPTION

Description of module goes here.

[% pod_prefix %]head1 SEE ALSO

perl.

[% pod_prefix %]head1 AUTHOR

[% full_name %] E<lt>[% email_address %]E<gt>.

[% pod_prefix %]head1 COPYRIGHT

Copyright (c) [% year %] Cold Spring Harbor Laboratory

This module is free software; you can redistribute it and/or
modify it under the terms of the GPL (either version 1, or at
your option, any later version) or the Artistic License 2.0.
Refer to LICENSE for the full license text and to DISCLAIMER for
additional warranty disclaimers.

[% pod_prefix %]cut

# ----------------------------------------------------

use strict;

1;
