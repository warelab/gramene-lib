#!/usr/bin/env perl

$| = 1;

use strict;
use warnings;
use autodie;
use feature qw( say );
use Data::Dumper;
use JSON;
use File::Basename;
use Getopt::Long;
use Grm::Search;
use Grm::Utils qw( camel_case commify iterative_search_values timer_calc );
use Pod::Usage;
use Readonly;
use Text::TabularDisplay;
use Text::Autoformat qw( autoformat );
use List::Util qw( max );

Readonly my %VALID_OUTPUT => map { $_, 1 } qw[ perl json summary table ];
Readonly my $SEPARATOR    => "************ Record %s ************\n";
Readonly my $WIDTH        => 78;
Readonly my @FIELDS       => qw[ id name ];

my $category   = '';
my $debug      =  0;
my $index_path = '';
my $format     = 'table';
my $limit      =  0;
my $query_file = '';
my $taxonomy   = '';
my $verbose    =  0;
my ( $help, $man_page );
GetOptions(
    'c|category:s' => \$category,
    'debug'        => \$debug,
    'i|index:s'    => \$index_path,
    'f|format:s'   => \$format,
    'file:s'       => \$query_file,
    'l|limit:i'    => \$limit,
    't|tax:s'      => \$taxonomy,
    'v|verbose'    => \$verbose,
    'help'         => \$help,
    'man'          => \$man_page,
) or pod2usage(2);

if ( $help || $man_page ) {
    pod2usage({
        -exitval => 0,
        -verbose => $man_page ? 2 : 1
    });
}; 

if ( !$VALID_OUTPUT{ $format } ) {
    pod2usage(
        sprintf('Invalid output format "%s", choose from %s',
            $format, join(', ', map { qq{"$_"} }sort keys %VALID_OUTPUT)
        )
    );
}

my @terms;
if ( $query_file ) {
    open my $fh, '<', $query_file;
    @terms = map { chomp; $_ } <$fh>;
    close $fh;
}
else {
    @terms = @ARGV;
}

if ( !@terms ) {
    pod2usage('No search terms');
}

my $print = sub { 
    if ( $format ne 'summary' || $verbose ) {
        print STDERR @_;
    }
};

my $timer    = timer_calc();
my @tab_flds = qw[ url content ];
my $tab      = Text::TabularDisplay->new( @tab_flds );
my $search   = Grm::Search->new;
my ( @summary , %seen );
my ( $query_num, $total_hits ) = ( 0, 0 );
TERM:
for my $term ( @terms ) {
    next if $seen{ $term }++;

    printf "%-70s\r", "Trying '$term'...";
    my $results  =  $search->search( 
        query    => $term, 
        category => $category,
        taxonomy => $taxonomy,
        debug    => $debug,
        facet    => 0,
        hl       => 0,
    );

    print "\n";

    my $num = $results->{'num_found'} || 0;

    $total_hits += $num;

    $print->(
        sprintf(
            qq[%6s: Found %s hit%s for "%s" in %s\n], 
            ++$query_num, 
            commify($num), 
            $num == 1 ? '' : 's',
            $term, 
            $results->{'time'}
        )
    );

    if ( $num < 1 ) {
        next TERM;
    }   

    if ( $format eq 'summary' ) {
        push @summary, [ $term, $num, $results->{'time'} ];
        next TERM;
    }

    if ( $num > 0 ) {
        if ( $format eq 'table' ) {
            my $max     = max( map { length } @FIELDS );
            my $rec_num = 0;

            while ( my ( $core, $response ) = each %{ $results->{'core'} } ) {
                for my $rec ( @{ $response->{'response'}{'docs'} } ) {
                    printf $SEPARATOR, ++$rec_num;

                    for my $f ( @FIELDS ) {
                        my $v = defined $rec->{ $f } ? $rec->{ $f } : q{};
                        if ( length $v > $WIDTH ) {
                            ( $v = autoformat( $v, { left => $max + 3 } ) ) 
                                =~ s/^\s+|\s+$//g;
                        }

                        printf "%${max}s: %s\n",
                            $f, $v,
                        ;
                    }
                }
            }
        }
        elsif ( $format eq 'json' ) {
            print encode_json( $results ), "\n"; 
        }
        else {
            print Dumper( $results ), "\n"; 
        }
    }
}

if ( $format eq 'summary' ) {
    @summary = sort { $a->[1] <=> $b->[1] } @summary;
    unshift @summary, [ qw( query found time ) ];
    print join "\n", ( map { join( "\t", @$_ ) } @summary ), '';
}

$print->(
    sprintf(
        "Done. Executed %s quer%s, found %s hit%s in %s.\n",
        commify($query_num), 
        $query_num == 1 ? 'y' : 'ies',
        commify($total_hits),
        $total_hits == 1 ? '' : 's',
        $timer->(),
    )
);

__END__

# ----------------------------------------------------

=pod

=head1 NAME

grm-search - execute a Gramene search

=head1 SYNOPSIS

  grm-search [options] query1 query2

Options:

  -c|--category  The search category
  -f|--format    Output format (perl, json)
  --file         A file containing query terms
  -i|--index     Alternate path to index
  -l|--limit     Only return this many
  -v|--verbose   Print progress to STDERR if using --file)
  --help         Show brief help and exit
  --man          Show full documentation

=head1 DESCRIPTION

Executes a Gramene search for each term given.

=head1 SEE ALSO

Grm::Search.

=head1 AUTHOR

Ken Youens-Clark E<lt>kclark@cshl.eduE<gt>.

=head1 COPYRIGHT

Copyright (c) 2012 Cold Spring Harbor Laboratory

This module is free software; you can redistribute it and/or
modify it under the terms of the GPL (either version 1, or at
your option, any later version) or the Artistic License 2.0.
Refer to LICENSE for the full license text and to DISCLAIMER for
additional warranty disclaimers.

=cut
